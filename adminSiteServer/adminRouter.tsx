// Misc non-SPA views
import { Request, Response, Router } from "express"
import * as express from "express"
import rateLimit from "express-rate-limit"
import filenamify from "filenamify"
import * as React from "react"
import { getConnection } from "typeorm"
import { expectInt, tryInt, renderToHtmlPage } from "./serverUtil"
import { BAKED_BASE_URL, ENV } from "../settings/serverSettings"
import { ExplorerAdminServer } from "../explorerAdmin/ExplorerAdminServer"
import { JsonError } from "../clientUtils/owidTypes"
import { GitCmsServer } from "../gitCms/GitCmsServer"
import { GIT_CMS_DIR } from "../gitCms/GitCmsConstants"

const adminRouter = Router()

// Parse incoming requests with JSON payloads http://expressjs.com/en/api.html
adminRouter.use(express.json({ limit: "50mb" }))

adminRouter.get("/", async (req, res) => {
    // Preview URLs generated by WP depend on the status of the post:
    // * PUBLISHED: owid.cloud/SLUG?preview=true --> run through WP singular.php
    //   and directly redirected to /admin/posts/preview/POST_ID
    // * DRAFT:
    //     - post: owid.cloud/?p=POST_ID&preview=true
    //     - page: owid.cloud/?page_id=PAGE_ID&preview=true
    //   --> "/" captured by NGINX and redirected here (/admin/)
    //
    // Ideally, the preview URL in WP would be pointing directly to
    // /admin/posts/preview/POST_ID (bypassing WP altogether, for published and
    // draft posts) but this is only partially possible for now, as the preview
    // URL of draft posts does not get rewritten by the preview_post_link filter
    // within Gutenberg.
    //
    // See:
    //  * https://github.com/WordPress/gutenberg/issues/13998
    //  * https://developer.wordpress.org/reference/hooks/preview_post_link/
    if (req.query.preview === "true" && (req.query.p || req.query.page_id)) {
        // HACK
        res.redirect(`/admin/posts/preview/${req.query.p || req.query.page_id}`)
    } else {
        res.redirect(`/admin/charts`)
    }
})

const explorerAdminServer = new ExplorerAdminServer(GIT_CMS_DIR, BAKED_BASE_URL)
explorerAdminServer.addAdminRoutes(adminRouter)

const gitCmsServer = new GitCmsServer({
    baseDir: GIT_CMS_DIR,
    shouldAutoPush: true,
})
gitCmsServer.createDirAndInitIfNeeded()
gitCmsServer.addToRouter(adminRouter)

export { adminRouter }
